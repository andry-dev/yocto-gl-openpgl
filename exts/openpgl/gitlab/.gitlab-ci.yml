## Copyright 2009-2020 Intel Corporation
## SPDX-License-Identifier: Apache-2.0
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  OPENPGL_RELEASE_PACKAGE_VERSION: "0.3.0"
  MACOSX_DEPLOYMENT_TARGET: "10.13"

stages:
  - build
  - scan1
  - scan2
  - release
  - scan-binaries

## Job Templates ##

.job_template: &base_build_job
  stage: build
  script:
    - gitlab/build.sh -G Ninja
  artifacts:
    paths:
    - build/install
    - build/openpgl/build
  before_script:
    - git submodule sync
    - git submodule init
    - git submodule update

.job_template: &build_job_docker
  <<: *base_build_job
  tags:
    - docker

.job_template: &base_release_job
  stage: release
  before_script:
    - git submodule sync
    - git submodule init
    - git submodule update


## Build Jobs ##

build-centos7:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  script:
  - gitlab/build.sh

build-centos8:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:centos8
  script:
  - gitlab/build.sh -G Ninja

build-ubuntu16.04:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu16.04
  script:
    - gitlab/build.sh -G Ninja
  allow_failure: true

build-ubuntu18.04:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu18.04
  script:
    - gitlab/build.sh -G Ninja

build-ubuntu20.04:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:ubuntu20.04
  script:
    - gitlab/build.sh -G Ninja

build-arch:
  <<: *build_job_docker
  image: $DOCKER_REGISTRY/ospray/docker-images:arch
  script:
    - gitlab/build.sh

build-macOS:
  <<: *base_build_job
  stage: build
  script:
    - gitlab/build.sh
  tags:
    - osx
    - clang
  allow_failure: true


build-windows-msvc15:
  stage: build
  script:
    - gitlab\build.bat "Visual Studio 15 2017 Win64" "v141" '"-DTBB_VERSION=2021.1.1"' '"-DTBB_HASH="""'
  tags:
    - msvc15
    - win10
  artifacts:
    paths:
      - build/install
    expire_in: 3 day
  allow_failure: true

## KW Jobs ##

build-kw-scan:
  stage: scan1
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  script:
    - gitlab/build-kw-scan.sh
  tags: [docker]
  artifacts:
    paths:
      - ./klocwork/*
  needs: []

check-kw-issues:
  stage: scan2
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  needs: [build-kw-scan]
  script:
    - gitlab/kw-check-issues.sh
  tags:
    - docker
  allow_failure: true

gen-kw-report:
  stage: scan2
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  needs: [build-kw-scan]
  tags: [docker]
  script:
    - gitlab/kw-gen-report.sh
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID klocwork "klocwork/report.log"
  artifacts:
    paths:
      - ./klocwork/*


## Protex Job ##

source-protex-scan:
  stage: scan1
  image: amd64/openjdk:8
  needs: []
  script:
    - gitlab/source_scan_protex.sh
  tags:
    - docker
  allow_failure: true

## Release Jobs ##

release-linux:
  <<: *base_release_job
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  script:
    - gitlab/release/linux.sh
  needs: []
  tags:
    - docker
    - modules
  artifacts:
    paths:
      - ./*.gz

release-macOS:
  <<: *base_release_job
  script:
    - gitlab/release/macos.sh
  needs: []
  tags:
    - osx
    - clang
  artifacts:
    paths:
      - ./*.zip

release-windows:
  <<: *base_release_job
  script:
    - gitlab/release/windows.ps1 "Visual Studio 15 2017 Win64" "v141"
  needs: []
  tags:
    - msvc15
    - win10
  artifacts:
    paths:
      - ./*.zip


## Binary Scan Jobs ##

scan-bdba-bin:
  stage: scan-binaries
  image: $DOCKER_REGISTRY/ospray/docker-images:centos7
  tags: [docker]
  needs: [release-linux, release-macOS, release-windows]
  script:
    - gitlab/bdba.sh "openpgl-*"
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID bdba "openpgl-*.pdf"
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID bdba "openpgl-*.csv"
  artifacts:
    paths:
      - openpgl-*.pdf
      - openpgl-*.csv
  allow_failure: true

av:
  stage: scan-binaries
  tags: [docker]
  image: $DOCKER_REGISTRY/clamav:ubuntu20.04
  needs: [release-linux, release-macOS, release-windows]
  script:
    - freshclam | tee -a /tmp/av_scan.log
    - clamscan -va --max-filesize=256M --max-scansize=1024M --alert-broken --alert-exceeds-max openpgl-* | tee -a /tmp/av_scan.log
    - gitlab/store-files.sh $CI_PROJECT_NAME $CI_PIPELINE_ID av /tmp/av_scan.log

# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "devel" branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  ## Build Jobs ##
  ### Build Linux Jobs ###
  build-centos7:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: centos:7
      cmd: |
        gitlab/build.sh

  build-centos8:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: centos:8
      cmd: |
        gitlab/build.sh

  #build-ubuntu16-04:
  #  secrets: inherit
  #  uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
  #  with:
  #    image: ospray/docker-images:ubuntu16.04
  #    # artifact-name: build-ubuntu1804-gcc_artifact
  #    cmd: |
  #      gitlab/build.sh

  build-ubuntu18-04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:18.04
      cmd: |
        gitlab/build.sh

  build-ubuntu20-04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:20.04
      cmd: |
        gitlab/build.sh

  build-ubuntu22-04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:22.04
      cmd: |
        gitlab/build.sh

  build-arch:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: archlinux:latest
      cmd: |
        gitlab/build.sh
  
  ### Build Windows Jobs ###

  build-windows-msvc15:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
          gitlab/build.bat "Visual Studio 15 2017 Win64" "v141" '"-DTBB_VERSION=2021.1.1"' '"-DTBB_HASH="""'           

  ### Build MacOS Jobs ###

  build-macOS:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "avx2", "x86_64" ]'
      cmd: |
          gitlab/build_mac.sh

  build-macOS-arm:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "arm" ]'
      cmd: |
          gitlab/build_mac.sh -DBUILD_TBB_FROM_SOURCE=ON


  ### KW Jobs ###

  kw-build-scan-report:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/static_analysis.yml@main
    with:
      project: OpenPGL
      #submodules: true
      prebuild: |
        export LD_LIBRARY_PATH=`pwd`/build_deps/install/lib:${LD_LIBRARY_PATH}
        cmake -S superbuild -B build_deps -DBUILD_JOBS=`nproc` -DBUILD_DEPENDENCIES_ONLY=ON
        cmake --build build_deps
        DEP_INSTALL_DIR=build_deps/install
        export embree_DIR=$DEP_INSTALL_DIR
        cmake -S . -B build -DTBB_ROOT=$DEP_INSTALL_DIR
      build: cmake --build build

  ### Protex Jobs ###

  ## Release Jobs ##

  release-linux:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: centos:7
      cmd: |
        export OPENPGL_RELEASE_PACKAGE_VERSION=0.4.1
        gitlab/release/linux.sh
      artifact-out: release-linux
      artifact-path: ./openpgl*.gz

  release-windows:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      submodules: true
      runs-on: '[ "Windows", "build" ]'
      artifact-out: release-windows
      artifact-path: ./openpgl*.zip
      cmd: |
        $env:OPENPGL_RELEASE_PACKAGE_VERSION="0.4.1"
        $OPENPGL_RELEASE_PACKAGE_VERSION="0.4.1"
        gitlab/release/windows.ps1 "Visual Studio 15 2017 Win64" "v141"

  release-macos:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      submodules: true
      runs-on: '[ "macOS", "sign", "avx2", "x86_64" ]'
      artifact-out: release-macos
      artifact-path: ./*.zip
      cmd: |
        export OPENPGL_RELEASE_PACKAGE_VERSION="0.4.1"
        gitlab/release/macos.sh

  #release-macos-arm:
  #  secrets: inherit
  #  uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
  #  with:
  #    submodules: true
  #    runs-on: '[ "macOS", "sign", "arm" ]'
  #    artifact-out: release-macos-arm
  #    artifact-path: ./*.zip
  #    cmd: |
  #      export OPENPGL_RELEASE_PACKAGE_VERSION="0.4.1"
  #      gitlab/release/macos.sh -DBUILD_TBB_FROM_SOURCE=ON

  ## Binary Scan Jobs ##

  binary-analysis:
    needs: 
      - release-linux
      - release-macos
      - release-windows
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/binary_analysis.yml@main
    with:
      project: openpgl
      artifact-in-linux: release-linux
      artifact-in-macos: release-macos
      artifact-in-windows: release-windows
      path: "./openpgl*.gz ./openpgl*.zip"

  antivirus-scan:
    needs:
      - release-linux
      - release-macos
      - release-windows
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/antivirus_scan.yml@main
    with:
      project: openpgl
      artifact-in-linux: release-linux
      artifact-in-macos: release-macos
      artifact-in-windows: release-windows
      path: "./openpgl*.gz ./openpgl*.zip"

